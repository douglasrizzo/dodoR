source('~/Desktop/dodoR/R/calcula.parametros.R')
require(mirt)
require('mirt')
install.packages('mirt')
require('mirt')
mt <- read.csv("~/Desktop/dissertacao/dados/matrizes/mt.csv", header=FALSE, quote="")
View(mt)
relatorio.mirt <- function(respostas, saida, itemtype='3PL', method = 'EM', optimizer = 'NR', verbose = T)
{
teste = mirt(respostas, model = 1, itemtype = itemtype, SE = T, SE.type = 'BL', method = method, optimizer = optimizer, verbose = verbose)
summary(teste)
#TODO erros, infits, outfits, curvas de resposta e informação e CSVs dos parâmetros, erros... o que der
return(teste)
}
teste = relatorio.mirt(mt, '')
mt[1:500,]
teste = relatorio.mirt(mt[1:500,], '')
View(mt[1:500,])
teste = relatorio.mirt(mt[1:100,], '')
teste = relatorio.mirt(mt[1:200,], '')
teste = relatorio.mirt(sample(mt[,1:5], 200), '')
mt[,1:5]
sample(mt[,1:5])
sample(mt[,1:5],3)
sample(nrow(mt[,1:5]), 3)
mt[sample(nrow(mt[,1:5]), 3)]
mt[sample(nrow(mt[,1:5]), 3),]
mt[sample(mt[,1:5], 3),]
mt[sample(nrow(mt[,1:5]), 3),]
opa = mt[sample(nrow(mt[,1:5]), 3),]
View(opa)
opa = mt[,1:5]
opa
opa[sampĺe(opa,200),]
opa[sampĺe(nrow(opa), 200),]
opa[sampĺe(opa, 200), ]
sample(opa)
opa[sampĺe(opa, 200), ]
opa[sampĺe(nrow(opa), 200), ]
nrow(opa)
opa[sampĺe(opa), 200), ]
opa[sampĺe(opa, 200), ]
sampĺe(opa, 200)
sampĺe(nrow(opa), 200)
sample(x = opa, size = 200)
sample(x = nrow(opa), size = 200)
opa[sample(x = nrow(opa), size = 200),]
opa[sample(x = nrow(opa), size = 200),]
teste = relatorio.mirt(opa[sample(x = nrow(opa), size = 200),], '')
plot(teste)
plot(teste, main='teste')
plot(teste, main='teste', ylab = 'opa')
plot(teste, main='teste', xlab = 'opa')
plot(teste)
plot(teste, type='info')
plot(teste, type='infoSE')
install.packages('latticeExtra')
plot(teste, type='infoSE')
version
plot(teste, type = 'SE')
plot(teste, type = 'score')
plot(teste, type = 'scorecontour')
itemplot(teste, 1)
ncol(opa)
for(x in ['info', 'SE']){ print(x)}
for(x in c('info', 'SE'){ print(x)}
for(x in c('info', 'SE')){ print(x)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){
itemplot(teste, 1, type = type)
}
}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'RE', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
type
for(type in c('info','SE', 'trace', 'score', 'infoSE', 'infotrace', 'contour', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'score', 'infoSE', 'infotrace', 'infocontour', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'score', 'infoSE', 'infotrace', 'tracecontour')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'score', 'infoSE', 'infotrace')){ itemplot(teste, 1, type=type)}
for(type in c('info','SE', 'trace', 'score', 'infoSE', 'infotrace')){ itemplot(teste, 1, type = type)}
itemplot(teste, 1, type = 'info')
itemplot(teste, 1, type = 'SE')
itemplot(teste, 1, type = 'trace')
itemplot(teste, 1, type = 'score')
itemplot(teste, 1, type = 'infoSE')
itemplot(teste, 1, type = 'infotrace')
itemplot(teste, 1, type = 'info')
itemplot(teste, 1, type = 'trace')
c(('a','b'))
c(['a','b'])
c(['a','b'],['a','b'])
c(c('a','b'),['a','b'])
c(c('a','b'),c('a','b'))
for (teste in c(c('a','b'),c('a','b'))){}
plot(teste)}
for (teste in c(c('a','b'),c('a','b'))){
plot(teste)}
for (teste in c(c('a','b'),c('a','b'))){
print(teste)}
print(teste[0])}
itemfit(teste)
teste
teste = relatorio.mirt(opa[sample(nrow(opa), 200), ])
itemfit(teste)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
itemfit(teste, X2 = T)
teste
summary(teste)
teste
summary(teste)
i1 = extract.item(1, teste)
i1 = extract.item(teste, 1)
i1
plot(i1)
summary(i1)
print(i1)
teste@pars
teste$pars
teste@pars
teste@pars@par
teste@pars$par
teste@pa
teste@pars
teste
summary(teste)
coef(teste)
itemplot(teste, 5)
itemplot(teste, 6)
itemplot(teste, 4)
itemplot(teste, 3)
itemplot(teste, 2)
itemplot(teste, 1)
pars = coef(teste)
pars
pars[0]
pars[1]
pars[2]
pars[1]
print(pars[1])
summary(pars)
data.frame()
data.frame([])
data.frame(c('a','b'))
data.frame(c('a','b'),c('a','b'))
data.frame(c('test_score','Curva do Teste'), c('test_info', 'Curva de Informação do Teste'))
data.frame(c('test_score','Curva do Teste'), c('test_info', 'Curva de Informação do Teste')).T
teste.plots = data.frame(c('test_score','Curva do teste'),
c('test_info', 'Curva de informação do teste'),
c('test_SE', 'Curva de erro padrão do teste'),
c('test_infoSE', 'Curvas de informação/erro padrão do teste'))
teste.plots
View(teste.plots)
teste.plots[0]
teste.plots[1]
teste.plots[1,1]
teste.plots[1,2]
teste.plots[2,1]
teste.plots = as.matrix(data.frame(c('test_score','Curva do teste'),
c('test_info', 'Curva de informação do teste'),
c('test_SE', 'Curva de erro padrão do teste'),
c('test_infoSE', 'Curvas de informação/erro padrão do teste'))
)
View(teste.plots)
teste.plots.T
teste.plots[2,1]
teste.plots[1,1]
for (a in teste.plots){}
for (a in teste.plots){
print(a)
}
for (a in teste.plots){
print(a[1])
}
for (a in teste.plots){
print(a[2])
}
filenames = c('test_score', 'test_info', 'test_SE', 'test_infoSE')
charttitles = c('Curva do teste', 'Curva de informação do teste', 'Curva de erro padrão do teste', 'Curvas de informação/erro padrão do teste')
testplots= data.frame(filenames, charttiles, stringsAsFactors = F)
filenames = c('test_score', 'test_info', 'test_SE', 'test_infoSE')
charttitles = c('Curva do teste', 'Curva de informação do teste', 'Curva de erro padrão do teste', 'Curvas de informação/erro padrão do teste')
testplots= data.frame(filenames, charttitles, stringsAsFactors = F)
testplots
testplots[1]
testplots[1,1]
testplots[2,1]
testplots[1,2]
testplots[1,1]
filenames = c('test_score', 'test_info', 'test_SE', 'test_infoSE')
charttitles = c('Curva do teste', 'Curva de informação do teste', 'Curva de erro padrão do teste', 'Curvas de informação/erro padrão do teste')
charttypes = c('score', 'info', 'SE', 'infoSE')
testplots= data.frame(filenames, chartttiles, charttypes, stringsAsFactors = F)
filenames = c('test_score', 'test_info', 'test_SE', 'test_infoSE')
charttitles = c('Curva do teste', 'Curva de informação do teste', 'Curva de erro padrão do teste', 'Curvas de informação/erro padrão do teste')
charttypes = c('score', 'info', 'SE', 'infoSE')
testplots= data.frame(filenames, charttitles, charttypes, stringsAsFactors = F)
testplots
testplots[1]
testplots[,1]
testplots[1,]
testplots[1,1]
testplots[1,2]
testplots[1,3]
filenames = c('info', 'se', 'trace', 'score', 'infoSE', 'infotrace')
charttitles = c('Curva de informação do item', 'Erro padrão do item', 'Trace do item', 'Curva de qtd. de acertos do item', 'Curvas de informação/erro padrão do item', 'Curvas de informação/trace do item')
charttypes = c('info','SE', 'trace', 'score', 'infoSE', 'infotrace')
coef
coef(teste)
coef(teste, simplify = T)
pars = coef(teste, simplify = T)
pars
pars$cov
pars$means
pars$items
write.table(pars$items, file = paste0(saida, 'parametros.csv'), sep = ',', row.names = F)
write.table(pars$items, file = paste0('~/Desktop/', 'parametros.csv'), sep = ',', row.names = F)
pars$items
pars$items[1]
pars$items[1:3]
pars$items[1:3,]
pars$items[,1:3]
pars
pars = coef(teste)
pars
pars$GroupPars
pars$V1
pars$V1[1]
itemfit
suumary(itemfit)
summary(itemfit)
fits = itemfit(teste, X2 = T)
fits
fits = itemfit(teste, X2 = T, method = 'ML')
fits
fits[1]
fits[,1]
fits[1,1]
fits[1,]
fits[1,2]
fits[,2]
fits[,2:]
fits[,2:3]
fits[,2:7]
fits[,2:9]
fits[,2:8]
relatorio.ltm <-
function(respostas, saida, type = 'latent.trait', IRT.param = T, max.iter = 10)
{
nItens=ncol(respostas)
colnames(respostas) = paste0('item ', 1:nItens)
print(paste0('Nº examinandos: ', nrow(respostas)))
print(paste0('calculando parâmetros ', Sys.time()))
teste = NULL
resumo = NULL
iter = 1
while(is.null(resumo) || iter != max.iter){
tryCatch(
{
iter++
teste = tpm(respostas, type = type, IRT.param = IRT.param,
start.val = 'random', na.action = na.exclude)
resumo = summary(teste)
},
error = function(e)
{
print(e$message) # or whatever error handling code you want
}
)}
print(resumo)
parametros = data.frame(a=resumo$coefficients[((nItens*2)+1):(nItens*3), 1],
b=resumo$coefficients[(nItens+1):(nItens*2), 1],
c=resumo$coefficients[1:nItens, 1],
row.names=NULL)
erros = data.frame(a=resumo$coefficients[((nItens*2)+1):(nItens*3), 2],
b=resumo$coefficients[(nItens+1):(nItens*2), 2],
c=resumo$coefficients[1:nItens,2],
row.names=NULL)
zs = data.frame(a=resumo$coefficients[((nItens*2)+1):(nItens*3), 3],
b=resumo$coefficients[(nItens+1):(nItens*2), 3],
c=resumo$coefficients[1:nItens, 3],
row.names=NULL)
dir.create(saida, showWarnings = FALSE, recursive = TRUE)
for(i in 1:nItens){
pdf(file=paste0(saida, 'cci_', i, '.pdf'))
plot(teste, type = 'ICC', items = i,
xlab = 'Habilidade', ylab = 'Probabilidade',
main = paste0('CCI - item ', i))
dev.off()
pdf(file=paste0(saida, 'cii_', i, '.pdf'))
plot(teste, type = 'IIC', items = i, annot = T,
xlab = 'Habilidade', ylab = 'Informação',
main = paste0('Curva de Informação - item ', i))
dev.off()
}
pdf(file=paste0(saida, 'cci_teste.pdf'))
plot(teste, type = 'IIC', items = 0, annot = T,
xlab = 'Habilidade', ylab = 'Informação',
main = 'Curva de informação do teste')
dev.off()
print('Parâmetros:')
print(summary(parametros))
pdf(file=paste0(saida, 'a.pdf'))
plot(density(parametros[,1]),main = 'Densidade de a',
ylab = 'Densidade', xlab = paste('N =',dim(parametros)[1]))
dev.off()
pdf(file=paste0(saida, 'b.pdf'))
plot(density(parametros[,2]),main = 'Densidade de b',
ylab = 'Densidade', xlab = paste('N =',dim(parametros)[1]))
dev.off()
pdf(file=paste0(saida, 'c.pdf'))
plot(density(parametros[,3]),main = 'Densidade de c',
ylab = 'Densidade', xlab = paste('N =',dim(parametros)[1]))
dev.off()
print('Erros:')
print(summary(erros))
print('Zs:')
print(summary(zs))
print(paste('Salvando parâmetros', Sys.time()))
write.table(parametros, file = paste0(saida, 'parametros.csv'),
sep = ',', row.names = F)
write.table(erros, file = paste0(saida, 'erros.csv'),
sep = ',', row.names = F)
write.table(zs, file = paste0(saida, 'zs.csv'),
sep = ',', row.names = F)
}
relatorio.mirt <- function(respostas, saida, itemtype='3PL', method = 'EM', optimizer = 'NR', verbose = T)
{
teste = mirt(respostas, model = 1, itemtype = itemtype, SE = T, SE.type = 'BL', method = method, optimizer = optimizer, verbose = verbose)
print(teste)
summary(teste)
pars = print(coef(teste, simplify = T))
print(coef(teste, simplify = F))
filenames = c('test_score', 'test_info', 'test_SE', 'test_infoSE')
charttitles = c('Curva do teste', 'Curva de informação do teste', 'Curva de erro padrão do teste', 'Curvas de informação/erro padrão do teste')
charttypes = c('score', 'info', 'SE', 'infoSE')
testplots = data.frame(filenames, charttitles, charttypes, stringsAsFactors = F)
for(i in 1:nrow(testplots))
{
pdf(file = paste0(saida, testplots[i,1],'.pdf'))
plot(teste, type = testplots[i,3], main = testplots[i,2])
dev.off()
}
filenames = c('info', 'se', 'trace', 'score', 'infoSE', 'infotrace')
charttitles = c('Curva de informação do item', 'Erro padrão do item', 'Trace do item', 'Curva de qtd. de acertos do item', 'Curvas de informação/erro padrão do item', 'Curvas de informação/trace do item')
charttypes = c('info','SE', 'trace', 'score', 'infoSE', 'infotrace')
itemplots = data.frame(filenames, charttitles, charttypes, stringsAsFactors = F)
for(i in 1:ncol(respostas))
{
for(ii in 1:nrow(itemplots)){
pdf(file = paste0(saida, testplots[i,1],'.pdf'))
plot(teste, type = testplots[i,3], main = testplots[i,2])
itemplot(teste, i, type = itemplots[i,3], main = paste(itemplots[i,2], '-', i))
dev.off()
}
}
write.table(pars$items[,1:3], file = paste0(saida, 'parametros.csv'), sep = ',', row.names = F)
fits = itemfit(teste, X2 = T, method = 'ML')
write.table(fits[,2:8], file = paste0(saida, 'medidas.csv'), sep = ',', row.names = T)
return(teste)
}
package.skeleton(name = 'dodoR', path = '~/')
