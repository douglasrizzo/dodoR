{
    "contents" : "#' Generate full IRT report based on \\code{mirt} package\n#' \n#' This function generates a full report of an IRT run of the \\code{mirt}\n#' package. It plots all possible charts for the test and each of the items;\n#' saves item parameters and item fit statistics (like Zhs and X2) into\n#' \\code{csv} files; and can alternatively be used in conjunction with Sweave\n#' to generate a PDF report, since it prints the summaries of all relevant\n#' variables during a run.\n#' \n#' %% ~~ If necessary, more details than the description above ~~\n#' \n#' @param answers A \\code{data.frame} containing examinees answers to items.\n#' Rows must represent examinees and columns represent items. If the\n#' \\code{data.frame} is in binary format, \\code{keys} is not required, but\n#' distractor analysis is not perfoermed.\n#' @param out A directory to which all files will be saved. If the directory\n#' does not exist, it will be recursively created.\n#' @param out.stats The directory to which CSV files will be saved. If the\n#' directory does not exist, it will be recursively created. if out.stats =\n#' NULL, it will be a subfolder of out.\n#' @param out.itemplots The directory to which item plots will be saved. If the\n#' directory does not exist, it will be recursively created. if out.itemplots =\n#' NULL, it will be a subfolder of out.\n#' @param out.testplots The directory to which test plots will be saved. If the\n#' directory does not exist, it will be recursively created. if out.testplots =\n#' NULL, it will be a subfolder of out.\n#' @param out.densities The directory to which parameter density plots will be\n#' saved. If the directory does not exist, it will be recursively created. if\n#' out.densities = NULL, it will be a subfolder of out.\n#' @param keys A vector containing the keys of the test, that is, the right\n#' answers for each item in the correct order.\n#' @param itemtype Item types to be used during parameter estimation. This\n#' parameter is passed directly to \\code{mirt}. Default is '3PL', the\n#' three-parameter logistic model. For more options, consult the \\code{mirt}\n#' manual.\n#' @param method Estimation method. This parameter is passed directly to\n#' \\code{mirt}. Default is 'EM', the Expectation-Maximization algorithm. For\n#' more options, consult the \\code{mirt} manual.\n#' @param optimizer Numerical approximation method used for optimizing\n#' convergence of estimation. This parameter is passed directly to \\code{mirt}.\n#' Default is 'NR', the Newton-Raphson method. For more options, consult the\n#' \\code{mirt} manual.\n#' @param verbose Defines how much output the algorithm must give. This\n#' parameter is passed directly to \\code{mirt}. Default is FALSE. For more\n#' options, consult the \\code{mirt} manual.\n#' @param test_score Whether or not test score plot should be generated.\n#' @param test_info Whether or not test information plot should be generated.\n#' @param test_SE Whether or not test standard error plot should be generated.\n#' @param test_infoSE Whether or not a plot containing both test information\n#' and standard error should be generated.\n#' @param trace Whether or not item trace plots should be generated.\n#' @param info Whether or not item information plots should be generated.\n#' @param se Whether or not item standard error plots should be generated.\n#' @param score Whether or not item score plots should be generated.\n#' @param infoSE Whether or not a plot containing both item information and\n#' standard error should be generated.\n#' @param infotrace Whether or not a plot containing both item information and\n#' trace should be generated.\n#' @return function returns an object of class SingleGroupClass\n#' (SingleGroupClass-class), the same one returned by the `mirt-package`\n#' function `mirt`, in case additional processing is desired beyond the\n#' generation of plots and CSV files with parameters\n#' @note %% ~~further notes~~\n#' @author Douglas De Rizzo Meneghetti\n#' @seealso %% ~~objects to See Also as \\code{\\link{help}}, ~~~\n#' @references %% ~put references to the literature/web site here ~\n#' @keywords IRT report\n# @examples\n\nirt.report <-\nfunction  (answers, out, out.stats = NULL, out.itemplots = NULL, \n   out.testplots = NULL, out.densities = NULL, keys = NULL, \n   itemtype = \"3PL\", method = \"EM\", optimizer = \"NR\", verbose = F, \n   test_score = T, test_info = T, test_SE = T, test_infoSE = T, \n   trace = T, info = T, se = T, score = T, infoSE = T, infotrace = T) \n{\n  if (is.null(out.stats)) \n    out.stats = paste0(out, \"stats/\")\n  if (is.null(out.itemplots)) \n    out.itemplots = paste0(out, \"itemplots/\")\n  if (is.null(out.testplots)) \n    out.testplots = paste0(out, \"testplots/\")\n  if (is.null(out.densities)) \n    out.densities = paste0(out, \"densities/\")\n  \n  dir.create(out.stats, showWarnings = FALSE, recursive = TRUE)\n  dir.create(out.itemplots, showWarnings = FALSE, recursive = TRUE)\n  dir.create(out.testplots, showWarnings = FALSE, recursive = TRUE)\n  dir.create(out.densities, showWarnings = FALSE, recursive = TRUE)\n  \n  teste = NULL\n  \n  if (is.null(keys)) {\n    teste = mirt(answers, model = 1, itemtype = itemtype, \n                 SE = T, SE.type = \"BL\", method = method, optimizer = optimizer, \n                 verbose = verbose)\n  }\n  else {\n    teste = mirt(key2binary(answers, keys), model = 1, itemtype = itemtype, \n                 SE = T, SE.type = \"BL\", method = method, optimizer = optimizer, \n                 verbose = verbose)\n    nominal = mirt(answers, model = 1, itemtype = \"nominal\", \n                   verbose = F)\n  }\n  \n  print(teste)\n  summary(teste)\n  superpars = coef(teste, simplify = F)\n  pars = coef(teste, simplify = T)\n  only.pars = pars$items[,1:3]\n  \n  testplots = c()\n  if (test_score) \n    testplots = rbind(testplots, c(\"test_score\", \"Curva do teste\", \n                                   \"score\"))\n  if (test_info) \n    testplots = rbind(testplots, c(\"test_info\", \"Curva de informação do teste\", \n                                   \"info\"))\n  if (test_SE) \n    testplots = rbind(testplots, c(\"test_SE\", \"Curva de erro padrão do teste\", \n                                   \"SE\"))\n  if (test_infoSE) \n    testplots = rbind(testplots, c(\"test_infoSE\", \"Curvas de informação/erro padrão do teste\", \n                                   \"infoSE\"))\n  for (i in 1:nrow(testplots)) {\n    print(plot(teste, type = testplots[i, 3], main = testplots[i, \n                                                               2]))\n    dev.copy2pdf(file = paste0(out.testplots, testplots[i, \n                                                        1], \".pdf\"))\n  }\n  \n  print(plot(density(pars$items[, 1]), main = \"Densidade de a\", \n             ylab = \"Densidade\", xlab = paste(\"N =\", dim(pars$items)[1])))\n  dev.copy2pdf(file = paste0(out.testplots, \"a.pdf\"))\n  print(plot(density(pars$items[, 2]), main = \"Densidade de b\", \n             ylab = \"Densidade\", xlab = paste(\"N =\", dim(pars$items)[1])))\n  dev.copy2pdf(file = paste0(out.testplots, \"b.pdf\"))\n  print(plot(density(pars$items[, 3]), main = \"Densidade de c\", \n             ylab = \"Densidade\", xlab = paste(\"N =\", dim(pars$items)[1])))\n  dev.copy2pdf(file = paste0(out.testplots, \"c.pdf\"))\n  \n  print(pars)\n  \n  itemplots = c()\n  \n  if (trace) \n    itemplots = rbind(itemplots, c(\"trace\", \"Curva característica do item\"))\n  if (info) \n    itemplots = rbind(itemplots, c(\"info\", \"Curva de informação do item\"))\n  if (se) \n    itemplots = rbind(itemplots, c(\"SE\", \"Erro padrão do item\"))\n  if (score) \n    itemplots = rbind(itemplots, c(\"score\", \"Curva de qtd. de acertos do item\"))\n  if (infoSE) \n    itemplots = rbind(itemplots, c(\"infoSE\", \"Curvas de informação/erro padrão do item\"))\n  if (infotrace) \n    itemplots = rbind(itemplots, c(\"infotrace\", \"Curvas de informação/característica do item\"))\n  \n  for (i in 1:ncol(answers)) {\n    print(superpars[i])\n    pars.string = paste('a =', only.pars[i, 1],'; b =', only.pars[i, 2], '; c =', only.pars[i, 3])\n    if (!is.null(keys)) {\n      print(itemplot(nominal, i, type = \"trace\", main = paste(\"Análise das alternativas do item\", \n                                                              \"-\", i)))\n      dev.copy2pdf(file = paste0(out.itemplots, \"distractor\", \n                                 \"_\", i, \".pdf\"))\n    }\n    for (ii in 1:nrow(itemplots)) {\n      print(itemplot(teste, i, type = itemplots[ii, 1], \n                     main = paste(itemplots[ii, 2], \"-\", i, '\\n', pars.string )))\n      dev.copy2pdf(file = paste0(out.itemplots, itemplots[ii, \n                                                          1], \"_\", i, \".pdf\"))\n    }\n  }\n  \n  write.table(only.pars, file = paste0(out.stats, \n                                               \"parametros.csv\"), sep = \",\", row.names = F)\n  fits = itemfit(teste, X2 = T, method = \"ML\")\n  write.table(fits[, 2:8], file = paste0(out.stats, \"medidas.csv\"), \n              sep = \",\", row.names = F)\n  \n  return(teste)\n}\n",
    "created" : 1428344449741.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2886527595",
    "id" : "15E4AC53",
    "lastKnownWriteTime" : 1428347491,
    "path" : "~/Desktop/dodoR/R/irt.report.R",
    "project_path" : "R/irt.report.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}